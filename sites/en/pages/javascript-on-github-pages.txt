=title JavaScript and jQuery on GitHub pages
=timestamp 2018-06-19T17:30:01
=indexes Markdown, GitHub, JavaScript, jQuery
=status show
=author szabgab
=translator nselem
=archive 1
=comments_disqus_enable 1

=abstract start

Si estás <a href="/getting-started-with-github-pages">empezando con GitHub pages</a> seguro te estás preguntando cómo puedes servir contenido dinámico. Bien, realmente no puedes porque las páginas son estáticas.
Sin embargo, esto no debe detenerte de programar en JavaScript y terminar con una <b>Single Page Application</b> (Aplicación de una sola página).

El primer paso en esta dirección es ver cómo agregar JavaScript y jQuery a las páginas.

=abstract end

De hecho, después de algunos pasos experimentales es muy simple. Después de todo podemos embeber HTML en nuestros archivos Markdown así que podemos embeber etiquetas de <b>script</b>. Si esto es suficiente para ti, ya puedes empezar a agregar código de JavaScript a tus páginas.


<h2>Step-by-step guide</h2>

Si vas comenzando con JavaScript, quizá quieras seguir este tutorial paso a paso.

<h3>Embedded JavaScript</h3>

En el primer ejemplo creamos un archivo Markdown llamado <hl>js.md</hl> En ese archivo Markdown pusimos un elemento de HTML <hl>div</hl> con un identificador "text".
Más tarde en ese archivo agregamos una etiqueta de <hl>script</hl> y dentro de ella escribimos un código simple de JavaScript. Este código localizará el elemento que tiene el identificador "text", o <hl>div</hl>, y dentro de este elemento pondrá el texto que aparece en el lado derecho de la asignación.

Lo principal que necesitas recordar aquí es que el código de JavaScript debe venir al final, asi que para cuando es ejecutado el DOM está listo. De otra manera el código de JavaScript no encontrará el elemento HTML.

<include file="examples/github/js.md">

<h3>jQuery loaded from external file</h3>

Nuestro siguiente paso es usar <a href="http://jquery.com/">jQuery</a> en lugar de vanilla JavaScript.
Para ello solo necesitamos cargar jQuery desde su CDN.
Si ya estamos cargando un archivo externo de JavaScript, creo que también podramos mover nuestro código a un archivo externo.
Así que hemos creado el archivo <hl>demo.js</hl> cargándolo usando otra etiqueta <hl>script</hl>.

Esta vez podemos poner la etiqueta <hl>script</hl> donde queramos ya que la funcion llamada de jQuery sólo será ejecutada cuando el DOM esté listo.
La punica limitación es que necesitamos cargar nuestro código <b>después</b> de que hayamos cargado jQuery.

<include file="examples/github/jquery.md">

En nuestro código jQuery tenemos una función "llamada" que será ejecutada cuando el HTML esté cargado y el DOM esté listo. Esto es que está <hl>$().ready</hl>.
Dentro de la función usamos la <hl>$("#text")</hl> expresion para localizar el elemento con el identificador "text" y entonces usamos el método <hl>html</hl> para poner el contenido del elemento.
(Es lo mismo que innerHTML en vanilla JavaScript.)

<include file="examples/github/demo.js">

<h3>Cargando datos JSON desde el servidor</h3>

Finalmente, podemos cargar algunos datos desde el servidor. Como no podemos correr cualquier cosa desde el servidor no podemos obtener datos dinámicos,
pero podemos guardar datos en archivos JSON y cargarlos usando los métodos Ajax provistos por jQuery.

En este ejemplo el archivo Markup es efectivmente el mismo que en los ejemplos anteriores.

<include file="examples/github/json.md">

En el código jQuery usamos el método <hl>getJSON</hl> para cargar el archivo <hl>data.json</hl> desde el servidor.
Esto significa, que primero el archivo HTML fue generado a partir del archivo Markdown será cargado. Entonces el navegador cargará jQuery seguido de nuestro código.
Entonces, una vez que todo esta listo, nuestro código corre y carga el archivo JSON desde el servidor.

El primer parámetro de <hl>getJSON</hl> es la URL de el archivo JSON que queremos cargar. El segundo parámetro es una función anónima que puede ser ejecutada cuando obtenemos la respuesta desde el servidor. Entonces el jQuery llamará nuestra función anónima y pasará el contenido del archivo JSON después de ser convertido a un objeto de JavaScript.

<hl>console.log(data);</hl> solo fue agregado para depuración.

En el último código JQuery, en <hl>$("#text").html(data["text"]);</hl> la primera parte <hl>$("#text")</hl> localizará el elemento  "text".
El método <hl>html</hl> enviará el contenido del elemento al valor que nosotros le asamos, que en este caso es <hl>data["text"]</hl>, el valor de la llave "text" viene desde el archivo JSON.

<include file="examples/github/json.js">

Este es el <hl>data.json</hl>

<include file="examples/github/data.json">

<h2>Conclusión</h2>

Una vez que lo intentes y lo consigas, parece muy directo embeber o incluir código de JavaScript y jQuery.
Ahora necesitamos dedicarnos a tareas más complejas.


