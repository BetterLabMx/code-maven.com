1
00:00:00,000 --> 00:00:08,849
hello there this is the CBS code even
open source a podcast and the video

2
00:00:08,849 --> 00:00:14,880
interview serious i'm your host cover
several times me is Thompson and we're

3
00:00:14,880 --> 00:00:19,590
going to talk about the project called
chrome hi how are you hi I'm fine thank

4
00:00:19,590 --> 00:00:19,890
you

5
00:00:19,890 --> 00:00:25,800
sorry I'm fine thank you let's start
with introducing you a little bit there

6
00:00:25,800 --> 00:00:30,269
please tell me a little about yourself
your background how did you get here ok

7
00:00:30,269 --> 00:00:36,750
so i'm in thomaston i'm a software
engineer in the UK i went for a betting

8
00:00:36,750 --> 00:00:42,629
and gaming company and have them for
about five years now and start tinkering

9
00:00:42,629 --> 00:00:46,920
with computers when I was a kid and
eventually ended up spending some time

10
00:00:46,920 --> 00:00:52,559
with a network engineer and then a
software engineer we know what PHP more

11
00:00:52,559 --> 00:00:58,079
recently written a better go and mostly
i like to make tools and try and make

12
00:00:58,079 --> 00:01:04,470
things to make other developers lives
easier basically and yeah not great deal

13
00:01:04,470 --> 00:01:06,330
to say about me to be honest

14
00:01:06,330 --> 00:01:14,549
oh ok uh how long have you been writing
open source stuff I'm think I really

15
00:01:14,549 --> 00:01:15,420
soon

16
00:01:15,420 --> 00:01:20,130
only start to get into it seriously for
the last couple of years or so and I

17
00:01:20,130 --> 00:01:24,960
mean I'd I'd released bits of code I'd
written before that but they weren't

18
00:01:24,960 --> 00:01:30,450
very useful and so only really in the
last couple years if I started started

19
00:01:30,450 --> 00:01:36,150
thinking about what other people might
need and and try to make tools available

20
00:01:36,150 --> 00:01:42,869
for them and I mean I think sharing code
is generally really good idea and I

21
00:01:42,869 --> 00:01:48,210
think only recently have I thought
perhaps my code was useful enough but

22
00:01:48,210 --> 00:01:54,329
people are actually using having that
experience is contributing to other

23
00:01:54,329 --> 00:01:55,380
projects

24
00:01:55,380 --> 00:02:03,509
yeah you so and i have been a maintainer
of the PHP client for the Easter

25
00:02:03,509 --> 00:02:08,280
pathologic project for a while now and
it's not very active project but it's

26
00:02:08,280 --> 00:02:12,710
used quite quite a few people and
altogether which project was

27
00:02:12,710 --> 00:02:20,150
that you had light and a KGB client for
the API and so each analyte is a

28
00:02:20,150 --> 00:02:26,330
collaborative text editor and I think
nowadays it is called the pad and really

29
00:02:26,330 --> 00:02:33,890
know Jas and it's worth looking up
actually it's a good one to use a great

30
00:02:33,890 --> 00:02:41,750
project and although other than that and
i made some small contributions here and

31
00:02:41,750 --> 00:02:47,690
there made a fix to the window manager
that I use one called cat get out of my

32
00:02:47,690 --> 00:02:52,460
way window manager written by a guy
called Sean Pringle and so really great

33
00:02:52,460 --> 00:02:57,530
a lightweight tiling window manager i'll
rather floating window manager with the

34
00:02:57,530 --> 00:03:02,930
great sport tiling just small bits here
and that usually just when I find

35
00:03:02,930 --> 00:03:07,100
something has broken and i needed to
work i'll try and fix it

36
00:03:07,100 --> 00:03:12,320
yeah that reminds me the the broken
window theory soon and fix your broken

37
00:03:12,320 --> 00:03:13,490
window editor

38
00:03:13,490 --> 00:03:21,680
okay whatever yeah yeah a but this
window manager slaton beauty is it so

39
00:03:21,680 --> 00:03:27,950
hard to answer the the window managers
in c and I don't know c and but usually

40
00:03:27,950 --> 00:03:33,650
I just my only real skill is just
figuring things out and just figure out

41
00:03:33,650 --> 00:03:39,830
the things i need to achieve y1
basically so despite not knowing see

42
00:03:39,830 --> 00:03:46,880
will help from google and couple of
tools that let me get a debug build and

43
00:03:46,880 --> 00:03:52,400
figure out where the second thought was
happening I grow blog post blog post

44
00:03:52,400 --> 00:04:00,860
about a while ago and entitled fixing a
segfault in bloom wwm and some Tom calm

45
00:04:00,860 --> 00:04:07,220
and again I don't know see so it's
probably laughable to anyone who does

46
00:04:07,220 --> 00:04:12,620
but it's more mostly an adventure in
finding a problem fixing it for me and

47
00:04:12,620 --> 00:04:14,330
was accepted in the project

48
00:04:14,330 --> 00:04:18,410
yeah yes I got my poll request managed
and I have no problem with it since it's

49
00:04:18,410 --> 00:04:23,690
a really really stable project otherwise
that's great i mean that's a little bit

50
00:04:23,690 --> 00:04:24,960
a little bit here a little there

51
00:04:24,960 --> 00:04:29,880
and that's that's how it moves forward
racing yeah absolutely so so let's get

52
00:04:29,880 --> 00:04:37,289
let's get to this project groan okay
what is it provided you build it so

53
00:04:37,289 --> 00:04:46,560
professionally I deal with quite a few
HTTP API that return JSON and and some

54
00:04:46,560 --> 00:04:51,870
of them are quite badly documented but
have very very large responses so

55
00:04:51,870 --> 00:04:57,930
sometimes you know what you're looking
for in their response and and you can go

56
00:04:57,930 --> 00:05:03,630
grab frighten some JSON and you find
that it's four five six levels d and so

57
00:05:03,630 --> 00:05:08,699
you don't get any context to go with
that value can be really difficult to

58
00:05:08,699 --> 00:05:15,090
and reason about the structure of that
JSON so and originally barrel think it's

59
00:05:15,090 --> 00:05:22,560
34 years ago i wrote ground in PHP and
the idea was to take a JSON structure

60
00:05:22,560 --> 00:05:29,130
and output hours a series of individual
assignments and was as valid JavaScript

61
00:05:29,130 --> 00:05:38,370
so you would end up with something like
a song . i don't know city . name equals

62
00:05:38,370 --> 00:05:44,130
leads for example and that means that if
you are grabbing for that value leads

63
00:05:44,130 --> 00:05:50,490
you can see the whole path all the way
through and you just get that context

64
00:05:50,490 --> 00:05:56,310
that allows you to see you know what
code do actually need to write to access

65
00:05:56,310 --> 00:06:03,240
this value what things do i need to
traverse over and so mostly I wrote it

66
00:06:03,240 --> 00:06:10,440
because I needed it and I didn't really
get any traction and initially I think

67
00:06:10,440 --> 00:06:15,000
mostly because i'd written in PHP the
main feedback out for people was well

68
00:06:15,000 --> 00:06:21,570
i'm writing know Jas or something like
that or even when i'm ryan c sharp or

69
00:06:21,570 --> 00:06:27,750
pearl I I don't have PHP installed so I
can't use this thing it wasn't of used

70
00:06:27,750 --> 00:06:30,840
to that many people

71
00:06:30,840 --> 00:06:36,240
okay done yeah I noticed that recently
you switch it to recently underwent

72
00:06:36,240 --> 00:06:38,129
actually uses you too

73
00:06:38,129 --> 00:06:41,219
to go and you were written the whole
thing

74
00:06:41,939 --> 00:06:46,860
yeah so I i did that earlier this year
and i've been writing and go on enough

75
00:06:46,860 --> 00:06:54,419
for maybe two two-and-a-half years now
and and if i'm honest the main reason i

76
00:06:54,419 --> 00:07:00,449
rewrote and go was that I was trying to
learn more go and something where I'd

77
00:07:00,449 --> 00:07:04,800
already solved sort of some of the main
problems and I could just do it like a

78
00:07:04,800 --> 00:07:10,199
straight port to go seems like a good
project to work on and but then I

79
00:07:10,199 --> 00:07:15,089
realized that and this means that other
people can use this more easily so go

80
00:07:15,089 --> 00:07:20,459
produces started Weiland binaries by
default which means i can build four

81
00:07:20,459 --> 00:07:24,869
different operating systems and just
upload a binary to get help people can

82
00:07:24,869 --> 00:07:30,539
just download it from it just works and
so I kind of took it from that start

83
00:07:30,539 --> 00:07:37,169
adding more features and maybe a bit
more robust it more user-friendly and

84
00:07:37,169 --> 00:07:41,789
and initially it was all just about
turning the JSON into these discrete

85
00:07:41,789 --> 00:07:48,449
assignments which had some point became
a verb to grow so Jason gets ground and

86
00:07:48,449 --> 00:07:56,519
it is the official way of putting it now
and I then decided that and for the tool

87
00:07:56,519 --> 00:08:01,919
to be a really powerful and maybe a
little bit more than just exploration be

88
00:08:01,919 --> 00:08:06,300
really great if you could do the other
going the other direction which is B

89
00:08:06,300 --> 00:08:11,789
come on groaning or no gain some people
would have a lot and was a bit of debate

90
00:08:11,789 --> 00:08:14,789
about early on then

91
00:08:14,789 --> 00:08:22,740
but that means that you can alter the
structure of the data in its and in the

92
00:08:22,740 --> 00:08:25,889
intermediate state when it's a list of
assignments with things like crap and

93
00:08:25,889 --> 00:08:32,729
sad and walk if you like and then turn
the result back into JSON again and I

94
00:08:32,729 --> 00:08:36,389
mean it's not the kind of thing you
should really be relying on scripts and

95
00:08:36,389 --> 00:08:40,649
when you just need like a quick fix for
something hacking on a command line and

96
00:08:40,649 --> 00:08:47,590
it turns out to be actually pretty
powerful trusting of

97
00:08:47,590 --> 00:08:52,540
after I've tried to grope our time
trying to the opposite value and i like

98
00:08:52,540 --> 00:08:57,400
that you basically take a JSON structure
which is that my problem is that in many

99
00:08:57,400 --> 00:09:03,790
cases the JSON structure comes in SF 119
basically yeah not even there

100
00:09:04,360 --> 00:09:10,540
I mean you could you can print up Jason
normally is a readable format even then

101
00:09:10,540 --> 00:09:13,900
it's it's hard to grab for something
because you get the line but you don't

102
00:09:13,900 --> 00:09:18,550
get the context but usually you just get
online and then you get the whole thing

103
00:09:18,550 --> 00:09:20,950
and it's unusable

104
00:09:20,950 --> 00:09:26,440
yeah for that purpose for reading so
what I really like this that you take

105
00:09:26,440 --> 00:09:29,950
that format and and and show the whole
tree

106
00:09:30,490 --> 00:09:36,040
although those other levels that go to
the point that there that i was looking

107
00:09:36,040 --> 00:09:44,320
for the fact that it's it's actually
executable javascript I don't know where

108
00:09:44,320 --> 00:09:47,740
is that is do do you feel it about you

109
00:09:47,740 --> 00:09:54,250
I haven't and lastly it's about
predictability so and i mean when i

110
00:09:54,250 --> 00:09:58,660
first read the tool i was trying to
think you know what format could i use

111
00:09:58,660 --> 00:10:05,200
to output this data to make it
understandable and i thought i could

112
00:10:05,200 --> 00:10:09,850
just write as though it was file paths
so like it slashes and I thought well

113
00:10:09,850 --> 00:10:14,980
you know make the obvious thing to do is
to write in JavaScript so mean Jason's a

114
00:10:14,980 --> 00:10:21,730
subset of of JavaScript and so I thought
maybe having my own subset as well would

115
00:10:21,730 --> 00:10:26,050
make sense because then in theory at
least anyone who knows json would

116
00:10:26,050 --> 00:10:31,540
immediately understand format and and
what different things mean so like what

117
00:10:31,540 --> 00:10:35,050
the square braces mean for example
someone had already come up with that

118
00:10:35,050 --> 00:10:43,840
formats for me I just needed to make it
work and I the fact that it is

119
00:10:43,840 --> 00:10:49,780
executable transcript is almost more of
a curiosity in some ways but it means

120
00:10:49,780 --> 00:10:54,820
that i could get away with not defining
the grammar properly initially and I

121
00:10:54,820 --> 00:10:58,450
just sort of said the grammar is
anything that's valid JavaScript which

122
00:10:58,450 --> 00:10:59,610
was

123
00:10:59,610 --> 00:11:05,790
and maybe a bit too vague have now
started to define the grommet properly

124
00:11:05,790 --> 00:11:11,160
and particularly when I've been dealing
with some bugs and things on the on the

125
00:11:11,160 --> 00:11:16,860
one running phase and which is fun it is
it's a real experience me learning the

126
00:11:16,860 --> 00:11:24,600
BBF that I think it's extended back a
snow form i think im so I I'm

127
00:11:24,600 --> 00:11:28,589
self-educated so I didn't do computer
science or compiler theory or anything

128
00:11:28,589 --> 00:11:36,930
so a lot of intensive googling to figure
it out and but yeah it's really think

129
00:11:36,930 --> 00:11:42,480
there's an example in the readme you can
pipe the output into a doctor is file to

130
00:11:42,480 --> 00:11:48,060
console that log at the end of it and it
it will output the object and and then

131
00:11:48,060 --> 00:11:52,500
before the young running mode existed

132
00:11:53,010 --> 00:11:56,880
I suppose that was kinda useful because
you could do the things we would grab

133
00:11:56,880 --> 00:12:02,640
Duffy and remove certain statements or
you said to change the paths in things

134
00:12:02,640 --> 00:12:07,199
and and then you could type into a
JavaScript file to get it back into JSON

135
00:12:07,199 --> 00:12:14,010
and but it was always a bit flaky
because you need every step of the way

136
00:12:14,010 --> 00:12:19,230
so your top level and statement has to
sort of say well as equals and the

137
00:12:19,230 --> 00:12:25,050
object and then only then can you refer
to properties of the object whereas when

138
00:12:25,050 --> 00:12:34,350
grounders is only one and process it can
imply all of that stuff from a single

139
00:12:34,350 --> 00:12:39,690
statement and you don't need those
preceding statements just say I think to

140
00:12:39,690 --> 00:12:41,040
sell if that makes sense

141
00:12:41,040 --> 00:12:46,920
yeah yeah i think so i do thinking about
this latch thing that separating

142
00:12:46,920 --> 00:12:51,660
installations like a fire pass right and
yeah that's not obvious solution that I

143
00:12:51,660 --> 00:12:57,120
that came to my mind now but it's
obviously also broken because / can be a

144
00:12:57,120 --> 00:13:03,420
value and then you have to escape it and
then yeah yeah so it's and and that and

145
00:13:03,420 --> 00:13:08,130
I also that means i have to document it
up front you know what is this / mean

146
00:13:08,130 --> 00:13:11,819
and coming up with my own syntax to
represent

147
00:13:12,950 --> 00:13:18,290
arrays or objects and things like that
just just seems beyond the fact that you

148
00:13:18,290 --> 00:13:21,950
even thought of it seemed silly in
hindsight and because there's already

149
00:13:21,950 --> 00:13:24,950
something that works really well for
that

150
00:13:25,880 --> 00:13:35,540
yeah yeah I think so yeah do you have
any plans for grow so busy a couple of

151
00:13:35,540 --> 00:13:39,680
things I think needs some attention at
the the error handling is not very good

152
00:13:39,680 --> 00:13:47,270
at the moment and so for example the
moment you'll get fairly cryptic errors

153
00:13:47,270 --> 00:13:51,320
things like just our couldn't pass the
input statements which is pretty useless

154
00:13:51,320 --> 00:13:56,930
particularly if you're putting you know
half a megabyte of of input into it got

155
00:13:56,930 --> 00:13:58,970
you know somewhere in here is an error

156
00:13:58,970 --> 00:14:03,920
ya know where I just just doesn't work

157
00:14:03,920 --> 00:14:13,670
sorry and so I'm looking at package
errors which is a go package written by

158
00:14:13,670 --> 00:14:18,320
de Chaney i think it is and which
provides could help you provide a bit

159
00:14:18,320 --> 00:14:23,720
more context about the cause of errors
by sort of wrapping them because they go

160
00:14:23,720 --> 00:14:31,130
up the call stack and but really I think
my lexer that is the ongoing needs some

161
00:14:31,130 --> 00:14:36,650
attention in terms of actually giving
the user some context in terms of you

162
00:14:36,650 --> 00:14:43,070
know what character was it that caused
the collector to choke and all you know

163
00:14:43,070 --> 00:14:48,740
what exactly it was that was unexpected
so that people can figure out what the

164
00:14:48,740 --> 00:14:56,210
problem is a bit more easily and so that
needs some work and there are a few bits

165
00:14:56,210 --> 00:15:00,500
of code i think just need to be
factoring we're upset things globally

166
00:15:00,500 --> 00:15:06,680
because it's easy and really it makes it
a bit difficult to test because I gotta

167
00:15:06,680 --> 00:15:13,760
change global state on another test to
make things work and I'd like to change

168
00:15:13,760 --> 00:15:23,150
how the adding colors to the grandma
airport works is kind of added in line

169
00:15:23,150 --> 00:15:25,550
as the statements are built about the
mama

170
00:15:25,550 --> 00:15:30,230
but then i need to do a sort to make
sure things are in the right order and a

171
00:15:30,230 --> 00:15:34,700
natural or human source as well not the
sort of standard just less than greater

172
00:15:34,700 --> 00:15:39,140
that and what not to do that I have to
strip the colors back out the statements

173
00:15:39,140 --> 00:15:43,910
again and which is a bit of a pain to be
inefficient and I mean performance has

174
00:15:43,910 --> 00:15:50,000
never really been a primary goal of the
tool but if it's unbearably slow then

175
00:15:50,000 --> 00:15:51,529
people are going to use it

176
00:15:51,529 --> 00:15:58,519
yeah and doesn't matter and I mean I i'm
a big fan of the the UNIX philosophy of

177
00:15:58,519 --> 00:16:06,079
just do one thing and do it well is this
a bit of debate about what constitute

178
00:16:06,079 --> 00:16:10,670
one thing so you know should grunting
and groaning be separate tools i don't

179
00:16:10,670 --> 00:16:14,990
think so i consider them i think that's
what close enough to one thing that it's

180
00:16:14,990 --> 00:16:21,500
okay and I'm not too keen on adding many
more features to it and the whole idea

181
00:16:21,500 --> 00:16:27,320
was that the to let you use things you
already know like crap and said an ark

182
00:16:27,320 --> 00:16:29,810
to get to get things done

183
00:16:29,810 --> 00:16:36,020
so one of the common questions I get is
while washing agencies get here so JQ is

184
00:16:36,020 --> 00:16:41,420
a tool for manipulating JSON and it is
an amazing tool it really really

185
00:16:41,420 --> 00:16:48,500
powerful there's a lot more things and
then grown but it's only useful if you

186
00:16:48,500 --> 00:16:53,120
already understand the structure of the
job of the JSON itself so if you know

187
00:16:53,120 --> 00:16:57,950
the path to the key that you want and
there's not much in the way of discovery

188
00:16:57,950 --> 00:17:02,209
that and it will do pretty printing and
things like that but again if you've got

189
00:17:02,209 --> 00:17:07,010
half a mega JSON and you grab for
something and it's eight levels deep you

190
00:17:07,010 --> 00:17:13,069
doing a lot scrolling to figure out
where that actually is and so really I

191
00:17:13,069 --> 00:17:22,160
see it so that as a compliment to take
you and which yeah i think they can work

192
00:17:22,160 --> 00:17:26,600
together i think probably not like in a
script or something like that but

193
00:17:26,600 --> 00:17:32,390
certainly I find myself using ground to
figure out what the structure of the

194
00:17:32,390 --> 00:17:36,050
JSON is and then i'll probably use
something like Jake you to do the actual

195
00:17:36,050 --> 00:17:36,929
transformation

196
00:17:36,929 --> 00:17:44,820
i'm feeling lazy now she's that ok uh
that's that's great i think we are

197
00:17:44,820 --> 00:17:47,940
getting quite close to a time I've ever

198
00:17:47,940 --> 00:17:53,549
yeah almost 20 minutes already so we're
talking about it while we were thinking

199
00:17:53,549 --> 00:17:57,119
about that we will only have 10 minutes
or so

200
00:17:57,119 --> 00:18:04,019
so it's interesting right is that
interesting hearing about it i do you

201
00:18:04,019 --> 00:18:08,369
have anything uh the other thing that we
haven't talked about that you would like

202
00:18:08,369 --> 00:18:14,879
to call I don't know tell people how to
do maybe maybe how to contribute or how

203
00:18:14,879 --> 00:18:21,299
to get you so that count contributions
are always welcome and I mean if you

204
00:18:21,299 --> 00:18:23,730
actually get excited when someone files
an issue

205
00:18:23,730 --> 00:18:29,369
it means I've got some something to do
and then I was a little bit upset that I

206
00:18:29,369 --> 00:18:35,909
kind of finished so speak and I didn't
have anything like to do on it and so

207
00:18:35,909 --> 00:18:40,529
great just raising issues is the
simplest way to contribute and people

208
00:18:40,529 --> 00:18:43,980
have got all requests or suggestions for
enhancements and things like that I'll

209
00:18:43,980 --> 00:18:50,190
always consider them all and there's a
small contributing dock in the root of

210
00:18:50,190 --> 00:18:55,590
the repository which suggests which is
just basically run the tests use go

211
00:18:55,590 --> 00:19:01,080
format when the winters and and then
issue or request and i look at it and

212
00:19:01,080 --> 00:19:11,490
yeah okay so i think that that's it
thank you for coming on the show and i

213
00:19:11,490 --> 00:19:15,840
hope many people will start using crawl
anymore people people and you have more

214
00:19:15,840 --> 00:19:18,749
ideas to help others

215
00:19:18,749 --> 00:19:23,519
alright thank you ma'am thank you babe
you're talking too much weight

