=title Create and download data in CSV format using plain JavaScript
=timestamp 2016-03-23T23:30:01
=indexes CSV
=status show
=books javascript
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

There can be cases, especially in Single Page Applications, when you have some data in the browser already
that you have probably received via an Ajax call that you'd like to let your users download.

<a href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a> is a nice and simple format to
keep tabular information.

In this simple example you'll see how to let your users save data from the browser.

This solution only works in the simple case, but it could be improved to handle some of the stranger cases as well.

=abstract end

<try file="examples/js/download_csv.html">

The <hl>data</hl> is just some array of arrays holding, well, the data. It does not really matter how it got into the browser.

The <hl>download_csv</hl> function that is triggered by the click of the button, will create a string that will become
the content of the file on the disk of the user. In the first line we add the header row and finish it with a newline (<hl>\n</hl>).
Then using a <hl>forEach</hl> loop we add additional lines separating the values with comma (<hl>,</hl>). After all we
are creating a file with comma separated values. Each line is finished with a newline.

Once we have the content in some variable we create a an <hl>a</hl> element and in the link (the <hl>href</hl> part)
we add the URI-encoded version of the future CSV file. We can even add the future name of the file which is 'people.csv'
in our case. Without that Chrome just saved the file calling it 'download.csv'.

The last step is to trigger the newly created element which tell the browser to download the "file".


<h2>Caveat</h2>

This solution only handles the case when the data is "simple".
If the data might have comma <hl>,</hl> in it then, in order for the file to work properly we'll have to
put the value with the comma in it inside quotes. This can be added quite easily.

However, what happens if the data can also contain quotes? We will then have to escape those.

This is not "unsolvable" of course, but it needs some more work and currently I did not have the need for that.

