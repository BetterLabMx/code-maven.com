=title argv - raw command line arguments in Node.js
=timestamp 2015-01-29T16:00:01
=indexes process, argv
=status show
=books nodejs
=author szabgab
=archive 1
=comments_disqus_enable 1

=abstract start

People coming from the JavaScript client-side development world did not have to deal with the command line,
but if you write a server side application, then you have good chances you'll have to reach the Linux/Unix
command line. (And if you are not lucky then you might even need to deal with command line on MS Windows.)

Node.js provides an easy way to access the raw data passed on the command line.

=abstract end

Normally on the command line you could pass all kinds of values:

A list of names: <hl>node app.js file1 file2</hl>

Key-value pairs:  <hl>node app.js --port NUMBER --dir PATH<hl>

Flags, without a value: <hl>node app.js --debug --verbose</hl>

You might also want to be able to provide short names: <hl>node app.js -d -v</hl>

And you would also like to be able to combine all these: <hl>node app.js -dv --port NUMBER --dir PATH  file1 file2<hl>

By default Node.js provide an object called <a href="http://nodejs.org/api/process.html#process_process_argv">process</a>
that has an element called <a href="http://nodejs.org/api/process.html#process_process_argv">argv</a> which is an
array holding the list of everything provided on the command line:

<include file="examples/raw_command_line_arguments.js">

Note: you don't even have to load <hl>process</hl> at it is in your process by default.

Running this command: <hl>node examples/raw_command_line_arguments.js -dv --port NUMBER --dir PATH  file1 file2<hl>

will print out this:

<code>
[ 'node',
  '/Users/gabor/work/code-maven.com/examples/raw_command_line_arguments.js',
  '-dv',
  '--port',
  'NUMBER',
  '--dir',
  'PATH',
  'file1',
  'file2' ]
</code>

Note:

The first element is always <hl>node</hl> itself.

The second element is always the file being executed.

The rest of the elements are the values supplied on the command line after the name of the file being executed.

Basically this is the list of all the values that were typed in on the command line.

You can loop over the array using <hl>for</hl> or <hl>forEach</hl> and extract the values.
This might work well in the most simple cases, but once the parameters become complex, it will
be better to use a higher level library.

I found a <a href="https://www.npmjs.com/package/minimist">minimist</a>,
<a href="https://github.com/harthur/nomnom">nomnom</a>, and
<a href="https://github.com/chevex/yargs">yargs</a>
(the successor of <a href="https://github.com/substack/node-optimist">node-optimist</a>)
just to name a few.

I don't have an opinion them yet, but I guess one I'll need something complex, I'll have to
check them out.

